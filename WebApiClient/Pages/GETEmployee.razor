@page "/employees"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation


<SfGrid DataSource="employees" AllowPaging="true">
    <GridColumns>
        <GridColumn Field="EmployeeId" HeaderText="ID" Width="100" TextAlign="TextAlign.Center" />
        <GridColumn Field="Name" HeaderText="Name" Width="200" />
        <GridColumn Field="Department" HeaderText="Department" Width="150" />
        <GridColumn Field="JobTitle" HeaderText="Job Title" Width="200" />
        <GridColumn Field="Email" HeaderText="Email" Width="250" />
        <GridColumn Field="EmploymentType" HeaderText="Employment Type" Width="150" />
        <GridColumn Field="Status" HeaderText="Status" Width="120" />

        <!-- Delete Button Column -->
        <GridColumn HeaderText="Actions" Width="120" TextAlign="TextAlign.Center">
            <Template>
                @{
                    var employee = (EmployeeDetail)@context;
                }
                <SfButton CssClass="btn btn-primary" Content="View" @onclick="() => ViewEmployee(employee.EmployeeId)" />
                <SfButton CssClass="btn btn-danger" Content="Delete" @onclick="() => DeleteEmployee(employee.EmployeeId)" />
            </Template>
        </GridColumn>
    </GridColumns>
</SfGrid>

@code {
    private List<EmployeeDetail>? employees;

    protected override async Task OnInitializedAsync()
    {
        await LoadEmployees();
    }

    private async Task LoadEmployees()
    {
        try
        {
            employees = await Http.GetFromJsonAsync<List<EmployeeDetail>>("https://localhost:7142/api/Employee");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching employees: {ex.Message}");
        }
    }

    private async Task DeleteEmployee(int employeeId)
    {
        try
        {
            bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this employee?");
            if (confirmed)
            {
                var response = await Http.DeleteAsync($"https://localhost:7142/api/Employee/{employeeId}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadEmployees(); // Refresh data after deletion
                }
                else
                {
                    Console.WriteLine($"Failed to delete employee. Status Code: {response.StatusCode}");
                }
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"HTTP Error: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Unexpected Error: {ex.Message}");
        }
    }
    private void ViewEmployee(int employeeId)
    {
        Navigation.NavigateTo($"/update/{employeeId}");
    }
}
